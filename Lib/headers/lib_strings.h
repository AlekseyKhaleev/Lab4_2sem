/**********************************************************************************************************************
* Данный модуль содержит описания классов, предназначенных для хранения символьных массивов и работы с ними
***********************************************************************************************************************/

# pragma once

/* Подключение модулей */
#include <exception>
#include <iostream>
#include <cstring>

namespace lib_strings {

    const int MAX_CHARS = 80;      // константа, соответствующая максимальному количеству символов считываемых из потока
    typedef unsigned long size_t;  // беззнаковый тип данных для индексирования массива и описания размерностей

    class TCharArray {
        /**************************************************************************************************************
        * Класс-массив типа char
        * Назначение: Описание массива символов типа char
        * Исходные данные:
        * Вызываемые модули:
        * Описание класса:
        * Класс содержит:
        * - 2 защищенных атрибута, соответствующие длине массива и его содержимому
        * - 3 конструктора;
        * - 1 деструктор;
        * - 3 перегруженных метода: begin(), end(), at()
        * - перегруженный оператор [].
        * Дата: 23 / 05 / 2022 Версия 1.01
        * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
        * Исправления: нет
        ***************************************************************************************************************/
    protected:
        size_t size_of_str = 0; // длина массива
        char *_str = nullptr;   // указатель на область памяти для хранения элементов массива
    public:
        /**************************************************************************************************************
        *                                         Конструкторы                                                        *
        **************************************************************************************************************/

        TCharArray();

        explicit TCharArray(const char *string);

        explicit TCharArray(int digit);

        // Деструктор
        virtual ~TCharArray(); // деструктор будет унаследован всеми производными классами

        /**************************************************************************************************************
        *                                              Методы                                                         *
        **************************************************************************************************************/

        char *begin(); // возвращает указатель на начало итерируемого объекта

        char *end();  // возвращает указатель на конец итерируемого объекта

        char &at(size_t index); // доступ к элементу массива по индексу

        /**************************************************************************************************************
        *                                         Перегрузка операторов                                               *
        **************************************************************************************************************/

        virtual char &operator[](size_t index); // перегрузка оператора для доступа к элементу массива по индексу

        /**************************************************************************************************************
        *        "Правило 3/5/0" (деструктор с освобождением памяти в начале описания класса)                         *
        **************************************************************************************************************/

        TCharArray(TCharArray const &other); // Конструктор копирования

        TCharArray &operator=(TCharArray const &other); // Оператор присваивания копии

        TCharArray(TCharArray &&that) noexcept; // Конструктор перемещения

        TCharArray &operator=(TCharArray &&that) noexcept; // Оператор назначения перемещения

        friend void swap(TCharArray &lhs, TCharArray &rhs) noexcept; // перегрузка функции перемещения

    };

    class String : public TCharArray {
        /**************************************************************************************************************
        * Назначение: работа с массивом символов типа TCharArray в качестве строки
        * Исходные данные: родительский класс TCharArray
        * Вызываемые модули: <fstream>, <iostream>
        * Описание специфических (не наследуемых) характеристик класса:
        * Класс содержит:
        * - 2 метода get() и get_size() возвращающие указатель на инициализированный массив и его размер соответственно
        * - перегруженные операторы: =, +, >>, <<, ==, !=, >, <
        * Дата: 23 / 05 / 2022 Версия 1.01
        * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
        * Исправления: нет
        ***************************************************************************************************************/
    private:
    public:
        /**************************************************************************************************************
        *                                         Конструкторы                                                        *
        **************************************************************************************************************/

        String();

        String(const char *string);

        explicit String(int digit);

        /**************************************************************************************************************
        *                                              Методы                                                         *
        **************************************************************************************************************/

        const char *get();

        size_t get_size();

        /**************************************************************************************************************
        *                                         Перегрузка операторов                                               *
        **************************************************************************************************************/

        /* Операторы присваивания */

        String &operator=(int digit);

        String &operator=(const char *string);

        String &operator=(char *string);

        friend std::istream &operator>>(std::istream &is, String &str); // Ввод

        friend std::ostream &operator<<(std::ostream &os, String &str); // Вывод

        friend void operator+(String &left, String &right); // Конкатенация

        /* Операторы лексикографического сравнения */

        friend bool operator==(String &left, String &right);

        friend bool operator!=(String &left, String &right);

        friend bool operator>(String &left, String &right);

        friend bool operator<(String &left, String &right);
    };
}
